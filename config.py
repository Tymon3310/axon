import os
import json5

CONFIG_ROOT = os.path.join(os.path.expanduser('~'), '.config', 'axon')
CACHE_ROOT  = os.path.join(os.path.expanduser('~'), '.cache', 'axon')

def ensure_exists(): # Ensures essential structure and files
    if not os.path.exists(CONFIG_ROOT):
        os.makedirs(CONFIG_ROOT)

    if not os.path.exists(CACHE_ROOT):
        os.makedirs(CACHE_ROOT)

    # Ensure required configs exist
    if not os.path.exists(os.path.join(CONFIG_ROOT, 'launcher.jsonc')):
        with open(os.path.join(CONFIG_ROOT, 'launcher.jsonc'), 'w') as f:
            f.write('''{
        "placeholder": "Search...",
        "entries": [
            {
                "name": "$(playerctl metadata title)", // $() will run a command, like in Bash
                "action": {"run": "playerctl play-pause"}, // The run action runs a Bash command
                "icon": "$(playerctl metadata mpris:artUrl)", // This requires a URL path (tip: use file:// for local)
                "condition": "pgrep spotify" // Condition will run only if the command it runs finishes with a 0 escape code
            },
            {"autogen": "desktop_apps"}, // Autogen will populate the list with autogenerated entries
            { // Allows you to do math!
                "name": "%% = +(%%)", // +() will evaluate a math expression, %% gets replaced with input
                "action": {"copy": "+(%%)"}, // Copy of course copies to the clipboard (with wl-copy, if you wanna do anything else do a RUN)
                "icon": "text://", // The text:// protocol just uses a string to render as an image
                "flags": ["NOTEMPTY"] // Flags add special behavior to an entry. Usually you wont need them, but they may make your config 500% better!
            },
            { // For running commands
                "name": "Run %%",
                "action": {"run": "%%"},
                "icon": "text://",
                "flags": ["NOTEMPTY"]
            }
        ]}''')

    # DEFAULT style.qss CODE HERE! If someone pull-requests this please remove this comment!
    # if not os.path.exists(os.path.join(CONFIG_ROOT, 'style.qss')):
    #     with open(os.path.join(CONFIG_ROOT, 'style.qss'), 'w') as f:
    #         f.write('''qss
    #           idk
    #           yes''')

def load(): # Loads required configs
    with open(os.path.join(CONFIG_ROOT, 'launcher.jsonc'), 'r') as f:
        config = json5.loads(f.read())
    
    if not os.path.exists(os.path.join(CONFIG_ROOT, 'style.qss')): # REMOVE THIS WHEN DEFAULT STYLE GETS ADDED (UP)
        return config, ''

    with open(os.path.join(CONFIG_ROOT, 'style.qss'), 'r') as f:
        style = f.read()
    
    return config, style
